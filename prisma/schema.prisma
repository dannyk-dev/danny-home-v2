// Danny Home – Admin Backend 𝘃2.1 (final)
//  ──────────────────────────────────────────
//  Complete, validated Prisma schema – all models & relations.
//  `npx prisma validate` → 0 errors, ready for migration.

/**
 * ───────────────────────────────┐
 * │ File: prisma/schema.prisma     │
 * └───────────────────────────────
 */

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins", "fullTextSearchPostgres"]
}

generator typescriptInterfaces {
  provider = "prisma-generator-typescript-interfaces"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/**
 * ────────────── Global enums ─────────────
 */
enum Role {
  ADMIN
  CUSTOMER
}

enum Currency {
  BRL
  USD
  EUR
}

enum OrderStatus {
  PENDING
  PAID
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  AUTHORIZED
  CAPTURED
  REFUNDED
  FAILED
}

enum DiscountType {
  FIXED
  PERCENT
}

enum PromoType {
  COUPON
  AUTOMATIC
}

enum BannerPos {
  HERO
  SIDEBAR
  FOOTER
}

enum CartStatus {
  ACTIVE
  ABANDONED
  CONVERTED
}

enum StockReason {
  MANUAL
  SALE
  RESTOCK
  RETURN
  ADJUSTMENT
}

/**
 * ──────────── Auth / Next‑Auth models ─────
 */
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String?
  access_token             String?
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String?
  session_state            String?
  refresh_token_expires_in Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * ────────────────── Core user models ─────────────────
 */
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?
//   passwordHash  String
  role          Role      @default(CUSTOMER)

  accounts  Account[]
  sessions  Session[]
  orders    Order[]
  addresses Address[]
  carts     Cart[]
  wishlists Wishlist[]
  reviews   ProductReview[]
  eventLogs EventLog[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  InventoryStock InventoryStock[]
}

/**
 * ────────────────── Catalog layer ───────────────────
 */
model Category {
  id              String  @id @default(cuid())
  name            String
  slug            String  @unique
  description     String?
  metaTitle       String?
  metaDescription String?

  parentId String?
  parent   Category?  @relation("CategoryToParent", fields: [parentId], references: [id])
  children Category[] @relation("CategoryToParent")

  products   Product[]
  promotions Promotion[] @relation("CategoryPromotions")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
}

model Product {
  id              String   @id @default(cuid())
  name            String
  slug            String   @unique
  description     String?
  richDesc        Json?
  brand           String?
  images          String[]
  metaTitle       String?
  metaDescription String?
  ratingAvg       Float    @default(0)
  ratingCount     Int      @default(0)
  taxable         Boolean  @default(true)

  categoryId    String
  category      Category         @relation(fields: [categoryId], references: [id])
  variants      ProductVariant[]
  promotions    Promotion[]      @relation("ProductPromotions")
  reviews       ProductReview[]
  wishlistItems WishlistItem[]

  defaultPrice Decimal  @db.Decimal(10, 2)
  currency     Currency @default(BRL)
  active       Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slug])
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  sku       String  @unique
  barcode   String? @unique
  ean       String? @unique

  product      Product          @relation(fields: [productId], references: [id])
  orderItems   OrderItem[]
  cartItems    CartItem[]
  stockLedgers InventoryStock[]

  price       Decimal  @db.Decimal(10, 2)
  currency    Currency @default(BRL)
  stock       Int      @default(0)
  attributes  Json?
  weightGrams Int?
  widthMm     Int?
  heightMm    Int?
  lengthMm    Int?
  active      Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * ────────────────── Promotions & banners ─────────────
 */
model Promotion {
  id           String       @id @default(cuid())
  name         String
  code         String?      @unique
  type         PromoType
  discountType DiscountType @default(PERCENT)
  value        Decimal      @db.Decimal(10, 2)
  maxUses      Int?
  usageCount   Int          @default(0)
  perUserLimit Int?
  startsAt     DateTime
  endsAt       DateTime
  active       Boolean      @default(true)

  products   Product[]  @relation("ProductPromotions")
  categories Category[] @relation("CategoryPromotions")
  orders     Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([code])
}

model Banner {
  id       String    @id @default(cuid())
  title    String?
  imageUrl String
  linkUrl  String?
  position BannerPos @default(HERO)
  order    Int       @default(0)
  startsAt DateTime?
  endsAt   DateTime?
  active   Boolean   @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([position, active])
}

/**
 * ────────────────── Commerce: cart & wishlists ──────
 */
model Cart {
  id       String     @id @default(cuid())
  userId   String?
  status   CartStatus @default(ACTIVE)
  currency Currency   @default(BRL)

  user  User?      @relation(fields: [userId], references: [id])
  items CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id               String   @id @default(cuid())
  cartId           String
  productVariantId String
  quantity         Int      @default(1)
  unitPrice        Decimal  @db.Decimal(10, 2)
  currency         Currency @default(BRL)

  cart    Cart           @relation(fields: [cartId], references: [id])
  variant ProductVariant @relation(fields: [productVariantId], references: [id])
}

model Wishlist {
  id        String         @id @default(cuid())
  userId    String
  user      User           @relation(fields: [userId], references: [id])
  items     WishlistItem[]
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
}

model WishlistItem {
  id         String   @id @default(cuid())
  wishlistId String
  productId  String
  addedAt    DateTime @default(now())

  wishlist Wishlist @relation(fields: [wishlistId], references: [id])
  product  Product  @relation(fields: [productId], references: [id])
}

/**
 * ────────────────── Reviews & ratings ───────────────
 */
model ProductReview {
  id        String  @id @default(cuid())
  productId String
  userId    String
  rating    Int     @default(5)
  title     String?
  comment   String?
  approved  Boolean @default(false)

  product Product @relation(fields: [productId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

/**
 * ────────────────── Inventory ───────────────────────
 */
model InventoryStock {
  id               String      @id @default(cuid())
  productVariantId String
  change           Int
  reason           StockReason
  note             String?
  snapshotAfter    Int
  createdByUserId  String?

  variant   ProductVariant @relation(fields: [productVariantId], references: [id])
  createdBy User?          @relation(fields: [createdByUserId], references: [id])
  createdAt DateTime       @default(now())
}

/**
 * ────────────────── Logistics & payments ────────────
 */
model ShippingMethod {
  id        String   @id @default(cuid())
  name      String
  carrier   String?
  flatRate  Decimal  @db.Decimal(10, 2)
  perKgRate Decimal? @db.Decimal(10, 2)
  currency  Currency @default(BRL)
  active    Boolean  @default(true)

  orders Order[]
}

model Payment {
  id            String        @id @default(cuid())
  orderId       String
  amount        Decimal       @db.Decimal(10, 2)
  currency      Currency      @default(BRL)
  method        String
  status        PaymentStatus @default(PENDING)
  gateway       String?
  transactionId String?
  processedAt   DateTime?
  meta          Json?

  order Order @relation(fields: [orderId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id               String        @id @default(cuid())
  userId           String
  status           OrderStatus   @default(PENDING)
  total            Decimal       @db.Decimal(10, 2)
  currency         Currency      @default(BRL)
  promotionId      String?
  shippingMethodId String?
  shippingCost     Decimal       @default(0) @db.Decimal(10, 2)
  taxAmount        Decimal       @default(0) @db.Decimal(10, 2)
  paymentStatus    PaymentStatus @default(PENDING)
  trackingNumber   String?

  user           User            @relation(fields: [userId], references: [id])
  promotion      Promotion?      @relation(fields: [promotionId], references: [id])
  shippingMethod ShippingMethod? @relation(fields: [shippingMethodId], references: [id])
  items          OrderItem[]
  payments       Payment[]

  shippingAddressId String?
  shippingAddress   Address? @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  billingAddressId  String?
  billingAddress    Address? @relation("BillingAddress", fields: [billingAddressId], references: [id])

  meta      Json?
  placedAt  DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderItem {
  id               String   @id @default(cuid())
  orderId          String
  productVariantId String
  quantity         Int      @default(1)
  unitPrice        Decimal  @db.Decimal(10, 2)
  currency         Currency @default(BRL)
  total            Decimal  @db.Decimal(10, 2)

  order          Order          @relation(fields: [orderId], references: [id])
  productVariant ProductVariant @relation(fields: [productVariantId], references: [id])
}

/**
 * ────────────────── Addresses & misc. ───────────────
 */
model Address {
  id         String  @id @default(cuid())
  userId     String?
  name       String?
  line1      String
  line2      String?
  city       String
  state      String?
  postalCode String
  country    String
  phone      String?
  isDefault  Boolean @default(false)

  user           User?   @relation(fields: [userId], references: [id])
  shippingOrders Order[] @relation("ShippingAddress")
  billingOrders  Order[] @relation("BillingAddress")
}

model StoreSetting {
  id        String   @id @default(cuid())
  key       String   @unique
  value     Json
  updatedAt DateTime @updatedAt
}

model EventLog {
  id        String   @id @default(cuid())
  userId    String?
  type      String
  payload   Json?
  createdAt DateTime @default(now())

  user User? @relation(fields: [userId], references: [id])
}

/**
 * ──────── End of schema – validated ✔︎ ───────
 */
